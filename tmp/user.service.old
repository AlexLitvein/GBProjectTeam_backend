import { Injectable } from '@nestjs/common';
import { EditUserDto } from './dto';
import { Model } from 'mongoose';
import { InjectModel } from '@nestjs/mongoose';
import { User, UserDocument } from './user.shema';
import { StorageService } from 'storage/storage.service';
import { serviceClients, Session, cloudApi } from '@yandex-cloud/nodejs-sdk';
import { GetFolderRequest } from '@yandex-cloud/nodejs-sdk/dist/generated/yandex/cloud/resourcemanager/v1/folder_service';

@Injectable()
export class UserService {
  AUTH_TOKEN = 'y0_AgAAAAAROK9PAATuwQAAAADQlet_PJZCJhHZRMKSqWvDTjEmc02rO_E'; //
  FOLDER_ID = 'b1g9k69gsqisd8frro1h'; // INFO: gb-project-team-cloud - это folder, b1g9k69gsqisd8frro1h - ее ид
  session = null;
  client = null;
  constructor(
    @InjectModel(User.name) private userModel: Model<UserDocument>,
    private storage: StorageService, // private readonly httpService: HttpService,
  ) {
    this.session = new Session({ oauthToken: this.AUTH_TOKEN });
    this.client = this.session.client(serviceClients.BucketServiceClient);
  }

  async editUser(userId: string, dto: EditUserDto) {
    //===============================
    // console.log({
    //   session_log: this.session,
    //   client_log: this.client,
    // });

    // const {
    //   storage: {
    //     bucket_service: { ListBucketsRequest, GetBucketRequest },
    //   },
    // } = cloudApi;

    // let response = await this.client.get(
    //   GetBucketRequest.fromPartial({ name: 'gb-project-team-cloud' }),
    // );

    // console.log({
    //   response_log: response,
    // });

    // response = await this.client.list(
    //   ListBucketsRequest.fromPartial({ folderId: this.FOLDER_ID }),
    // );

    // for (const bucket of response.buckets) {
    //   console.log(`Bucket: ${bucket.name}, id: ${bucket.id}`);
    // }
    //===============================

    // INFO:
    /**
     * [options.new=false] «Boolean» По умолчанию findOneAndUpdate() возвращает документ
     * в том виде, в котором он был до применения обновления. Если вы установите
     * new: true, вместо этого findOneAndUpdate() предоставит вам объект после
     * применения обновления.
     */
    const user = await this.userModel.findOneAndUpdate({ _id: userId }, dto, {
      new: true,
    });
    // .set({ updatedAt: new Date() });

    return user;
  }
}
