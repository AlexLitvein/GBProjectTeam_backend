// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

// Вот здесь надо подумать какие нам нужны состояния для проекта и чем они будут отличаться
enum State {
  IN_PROGRESS
  ARCHIVED
  FREEZED
}

enum Status {
  UNDEFINED
  ACCEPTED
  REJECTED
}

type Coordinates {
  x Int
  y Int
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  email        String     @unique
  hash         String
  firstName    String?
  lastName     String?
  middelName   String?
  company      String?
  department   String?
  position     String?
  avatarImage  String?
  editorById   String[]   @db.ObjectId
  approverById String[]   @db.ObjectId
  viewerById   String[]   @db.ObjectId
  ownerBy      Project[]  @relation("owner")
  editorBy     Project[]  @relation("editor", fields: [editorById], references: [id])
  approverBy   Project[]  @relation("approver", fields: [approverById], references: [id])
  viewerBy     Project[]  @relation("viewer", fields: [viewerById], references: [id])
  files        File[]     @relation("file_owner")
  messages     Message[]  @relation("message")
  bookmark     Bookmark[] @relation("bookmark")
  comments     Comment[]  @relation("user_comment")
  role         Role       @default(USER)

  @@map("users")
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  closeAt     DateTime?
  archiveAt   DateTime?
  title       String
  description String?
  state       State     @default(IN_PROGRESS)
  status      Status    @default(IN_PROGRESS)
  ownerId     String    @db.ObjectId
  editorsId   String[]  @db.ObjectId
  approversId String[]  @db.ObjectId
  viewersId   String[]  @db.ObjectId
  owner       User      @relation("owner", fields: [ownerId], references: [id])
  editors     User[]    @relation("editor", fields: [editorsId], references: [id])
  approvers   User[]    @relation("approver", fields: [approversId], references: [id])
  viewers     User[]    @relation("viewer", fields: [viewersId], references: [id])
  files       File[]    @relation("file")
  comments    Comment[] @relation("project_comment")

  @@map("projects")
}

model File {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  fileName          String
  filePath          String
  description       String?
  project           Project   @relation("file", fields: [projectId], references: [id])
  projectId         String    @db.ObjectId
  owner             User      @relation("file_owner", fields: [ownerId], references: [id])
  ownerId           String    @db.ObjectId
  createdAt         DateTime  @default(now())
  previousVersionId String?   @unique @db.ObjectId
  previousVersion   File?     @relation("version", fields: [previousVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextVersion       File?     @relation("version")
  version           Int       @default(1)
  comments          Comment[] @relation("file_comment")

  @@map("files")
}

model Comment {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  projectId          String      @db.ObjectId
  fileId             String      @db.ObjectId
  userId             String      @db.ObjectId
  project            Project     @relation("project_comment", fields: [projectId], references: [id])
  file               File        @relation("file_comment", fields: [fileId], references: [id])
  user               User        @relation("user_comment", fields: [userId], references: [id])
  status             Status      @default(IN_PROGRESS)
  pageNumber         Int
  commentCoordinates Coordinates
  commentChat        Message[]   @relation("comment_message")

  @@map("comments")
}

model Message {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  text    String
  fileId  String  @db.ObjectId
  userId  String  @db.ObjectId
  comment Comment @relation("comment_message", fields: [fileId], references: [id])
  user    User    @relation("message", fields: [userId], references: [id])

  @@map("messages")
}

model Bookmark {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  link        String
  userId      String   @db.ObjectId
  user        User     @relation("bookmark", fields: [userId], references: [id])

  @@map("bookmarks")
}
